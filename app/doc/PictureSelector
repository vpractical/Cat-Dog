http://p.codekk.com/detail/Android/LuckSiege/PictureSelector



进入相册 以下是例子：用不到的 api 可以不写
 PictureSelector.create(MainActivity.this)
     .openGallery()//全部.PictureMimeType.ofAll()、图片.ofImage()、视频.ofVideo()
     .theme()//主题样式(不设置为默认样式) 也可参考 demo values/styles 下 例如：R.style.picture.white.style
     .maxSelectNum()// 最大图片选择数量 int
     .minSelectNum()// 最小选择数量 int
    .imageSpanCount(4)// 每行显示个数 int
     .selectionMode()// 多选 or 单选 PictureConfig.MULTIPLE or PictureConfig.SINGLE
     .previewImage()// 是否可预览图片 true or false
     .previewVideo()// 是否可预览视频 true or false
    .enablePreviewAudio() // 是否可播放音频 true or false
     .compressGrade()// luban 压缩档次，默认 3 档 Luban.THIRD_GEAR、Luban.FIRST_GEAR、Luban.CUSTOM_GEAR
     .isCamera()// 是否显示拍照按钮 true or false
    .isZoomAnim(true)// 图片列表点击 缩放效果 默认 true
    .sizeMultiplier(0.5f)// glide 加载图片大小 0~1 之间 如设置 .glideOverride()无效
    .setOutputCameraPath("/CustomPath")// 自定义拍照保存路径,可不填
     .enableCrop()// 是否裁剪 true or false
     .compress()// 是否压缩 true or false
     .compressMode()//系统自带 or 鲁班压缩 PictureConfig.SYSTEM_COMPRESS_MODE or LUBAN_COMPRESS_MODE
     .glideOverride()// int glide 加载宽高，越小图片列表越流畅，但会影响列表图片浏览的清晰度
     .withAspectRatio()// int 裁剪比例 如 16:9 3:2 3:4 1:1 可自定义
     .hideBottomControls()// 是否显示 uCrop 工具栏，默认不显示 true or false
     .isGif()// 是否显示 gif 图片 true or false
     .freeStyleCropEnabled()// 裁剪框是否可拖拽 true or false
     .circleDimmedLayer()// 是否圆形裁剪 true or false
     .showCropFrame()// 是否显示裁剪矩形边框 圆形裁剪时建议设为 false   true or false
     .showCropGrid()// 是否显示裁剪矩形网格 圆形裁剪时建议设为 false    true or false
     .openClickSound()// 是否开启点击声音 true or false
     .selectionMedia()// 是否传入已选图片 List<LocalMedia> list
     .previewEggs()// 预览图片时 是否增强左右滑动图片体验(图片滑动一半即可看到上一张是否选中) true or false
     .cropCompressQuality()// 裁剪压缩质量 默认 90 int
     .compressMaxKB()//压缩最大值 kb compressGrade()为 Luban.CUSTOM_GEAR 有效 int
     .compressWH() // 压缩宽高比 compressGrade()为 Luban.CUSTOM_GEAR 有效  int
     .cropWH()// 裁剪宽高比，设置如果大于图片本身宽高则无效 int
     .rotateEnabled() // 裁剪是否可旋转图片 true or false
     .scaleEnabled()// 裁剪是否可放大缩小图片 true or false
     .videoQuality()// 视频录制质量 0 or 1 int
     .videoSecond()// 显示多少秒以内的视频 or 音频也可适用 int
    .recordVideoSecond()//视频秒数录制 默认 60s int
     .forResult(PictureConfig.CHOOSE_REQUEST);//结果回调 onActivityResult code


记得要在上传完图片后调用，清理缓存:
包括裁剪和压缩后的缓存，要在上传成功后调用，注意：需要系统 sd 卡权限
      PictureFileUtils.deleteCacheDirFile(MainActivity.this);


<!--默认样式 注意* 样式只可修改，不能删除任何一项 否则报错-->
    <style name="picture.default.style" parent="Theme.AppCompat.Light.DarkActionBar">
        <!-- Customize your theme here. -->
        <!--标题栏背景色-->
        <item name="colorPrimary">@color/bar_grey</item>
        <!--状态栏背景色-->
        <item name="colorPrimaryDark">@color/bar_grey</item>
        <!--是否改变图片列表界面状态栏字体颜色为黑色-->
        <item name="picture.statusFontColor">false</item>
        <!--返回键图标-->
        <item name="picture.leftBack.icon">@drawable/picture_back</item>
        <!--标题下拉箭头-->
        <item name="picture.arrow_down.icon">@drawable/arrow_down</item>
        <!--标题上拉箭头-->
        <item name="picture.arrow_up.icon">@drawable/arrow_up</item>
        <!--标题文字颜色-->
        <item name="picture.title.textColor">@color/white</item>
        <!--标题栏右边文字-->
        <item name="picture.right.textColor">@color/white</item>
        <!--图片列表勾选样式-->
        <item name="picture.checked.style">@drawable/checkbox_selector</item>
        <!--开启图片列表勾选数字模式-->
        <item name="picture.style.checkNumMode">false</item>
        <!--选择图片样式 0/9-->
        <item name="picture.style.numComplete">false</item>
        <!--图片列表底部背景色-->
        <item name="picture.bottom.bg">@color/color_fa</item>
        <!--图片列表预览文字颜色-->
        <item name="picture.preview.textColor">@color/tab_color_true</item>
        <!--图片列表已完成文字颜色-->
        <item name="picture.complete.textColor">@color/tab_color_true</item>
        <!--图片已选数量圆点背景色-->
        <item name="picture.num.style">@drawable/num_oval</item>
        <!--预览界面标题文字颜色-->
        <item name="picture.ac_preview.title.textColor">@color/white</item>
        <!--预览界面已完成文字颜色-->
        <item name="picture.ac_preview.complete.textColor">@color/tab_color_true</item>
        <!--预览界面标题栏背景色-->
        <item name="picture.ac_preview.title.bg">@color/bar_grey</item>
        <!--预览界面底部背景色-->
        <item name="picture.ac_preview.bottom.bg">@color/bar_grey_90</item>
        <!--预览界面状态栏颜色-->
        <item name="picture.status.color">@color/bar_grey_90</item>
        <!--预览界面返回箭头-->
        <item name="picture.preview.leftBack.icon">@drawable/picture_back</item>
        <!--是否改变预览界面状态栏字体颜色为黑色-->
        <item name="picture.preview.statusFontColor">false</item>
        <!--裁剪页面标题背景色-->
        <item name="picture.crop.toolbar.bg">@color/bar_grey</item>
        <!--裁剪页面状态栏颜色-->
        <item name="picture.crop.status.color">@color/bar_grey</item>
        <!--裁剪页面标题文字颜色-->
        <item name="picture.crop.title.color">@color/white</item>
        <!--相册文件夹列表选中图标-->
        <item name="picture.folder_checked_dot">@drawable/orange_oval</item>
    </style>

5、常用功能：
启动相册、拍照：


 PictureSelector.create(MainActivity.this)
       .openGallery(PictureMimeType.ofImage())
       .forResult(PictureConfig.CHOOSE_REQUEST);
单独启动拍照或视频 根据 PictureMimeType 自动识别：

PictureSelector.create(MainActivity.this)
       .openCamera(PictureMimeType.ofImage())
       .forResult(PictureConfig.CHOOSE_REQUEST);

预览图片：


// 预览图片 可自定长按保存路径
PictureSelector.create(MainActivity.this).externalPicturePreview(position, "/custom_file", selectList);
PictureSelector.create(MainActivity.this).externalPicturePreview(position, selectList);
预览视频：

PictureSelector.create(MainActivity.this).externalPictureVideo(video_path);

结果回调：

@Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            switch (requestCode) {
                case PictureConfig.CHOOSE_REQUEST:
                    // 图片选择结果回调
                    selectList = PictureSelector.obtainMultipleResult(data);
                    // 例如 LocalMedia 里面返回三种 path
                    // 1.media.getPath(); 为原图 path
                    // 2.media.getCutPath();为裁剪后 path，需判断 media.isCut();是否为 true
                    // 3.media.getCompressPath();为压缩后 path，需判断 media.isCompressed();是否为 true
                    // 如果裁剪并压缩了，以取压缩路径为准，因为是先裁剪后压缩的
                    adapter.setList(selectList);
                    adapter.notifyDataSetChanged();
                    DebugUtil.i(TAG, "onActivityResult:" + selectList.size());
                    break;
            }
        }
    }
6、混淆配置：

#PictureSelector 2.0
-keep class com.luck.picture.lib.** { *; }

-dontwarn com.yalantis.ucrop**
-keep class com.yalantis.ucrop** { *; }
-keep interface com.yalantis.ucrop** { *; }

 #rxjava
-dontwarn sun.misc.**
-keepclassmembers class rx.internal.util.unsafe.*ArrayQueue*Field* {
 long producerIndex;
 long consumerIndex;
}
-keepclassmembers class rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef {
 rx.internal.util.atomic.LinkedQueueNode producerNode;
}
-keepclassmembers class rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef {
 rx.internal.util.atomic.LinkedQueueNode consumerNode;
}

#rxandroid
-dontwarn sun.misc.**
-keepclassmembers class rx.internal.util.unsafe.*ArrayQueue*Field* {
   long producerIndex;
   long consumerIndex;
}
-keepclassmembers class rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef {
    rx.internal.util.atomic.LinkedQueueNode producerNode;
}
-keepclassmembers class rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef {
    rx.internal.util.atomic.LinkedQueueNode consumerNode;
}

#glide
-keep public class * implements com.bumptech.glide.module.GlideModule
-keep public class * extends com.bumptech.glide.AppGlideModule
-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
  **[] $VALUES;
  public *;
}

# for DexGuard only
-keepresourcexmlelements manifest/application/meta-data@value=GlideModule
项目中需要第三方库的支持：

glide:4.0.0 RC1
rxjava:2.0.5
rxandroid:2.0.1
PhotoView:1.2.4
luban
裁剪使用 ucrop
